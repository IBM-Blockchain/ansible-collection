..
.. SPDX-License-Identifier: Apache-2.0
..

:github_url: https://github.com/IBM-Blockchain/ansible-collection/edit/main/plugins/modules/organization_info.py


organization_info -- Get information about a Hyperledger Fabric organization
============================================================================

.. contents::
   :local:
   :depth: 1


Synopsis
--------

Get information about a Hyperledger Fabric organization by using the IBM Blockchain Platform.

A Hyperledger Fabric organziation is also known as a Membership Services Provider (MSP).

This module works with the IBM Blockchain Platform managed service running in IBM Cloud, or the IBM Blockchain Platform software running in a Red Hat OpenShift or Kubernetes cluster.






Parameters
----------

  api_endpoint
    The URL for the IBM Blockchain Platform console.

    | **Type**: str

  api_authtype
    \ :literal:`ibmcloud`\  - Authenticate to the IBM Blockchain Platform console using IBM Cloud authentication. You must provide a valid API key using \ :emphasis:`api\_key`\ .

    \ :literal:`basic`\  - Authenticate to the IBM Blockchain Platform console using basic authentication. You must provide both a valid API key using \ :emphasis:`api\_key`\  and API secret using \ :emphasis:`api\_secret`\ .

    | **Type**: str

  api_key
    The API key for the IBM Blockchain Platform console.

    | **Type**: str

  api_secret
    The API secret for the IBM Blockchain Platform console.

    Only required when \ :emphasis:`api\_authtype`\  is \ :literal:`basic`\ .

    | **Type**: str

  api_timeout
    The timeout, in seconds, to use when interacting with the IBM Blockchain Platform console.

    | **Type**: int
    | **Default value**: ``60``

  api_token_endpoint
    The IBM Cloud IAM token endpoint to use when using IBM Cloud authentication.

    Only required when \ :emphasis:`api\_authtype`\  is \ :literal:`ibmcloud`\ , and you are using IBM internal staging servers for testing.

    | **Type**: str
    | **Default value**: ``https://iam.cloud.ibm.com/identity/token``

  name
    The name of the organization.









Examples
--------

.. code-block:: yaml+jinja

    
    - name: Get the organization
      ibm.blockchain_platform.organization_info:
        api_endpoint: https://ibp-console.example.org:32000
        api_authtype: basic
        api_key: xxxxxxxx
        api_secret: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        name: Org1



Return Values
-------------

  exists
    True if the organization exists, false otherwise.

    | **Type**: boolean

  organization
    The organization.

    | **Returned**: if organization exists
    | **Type**: dict

    name
      The name of the organization.

      | **Type**: str
      | **Sample**: ``Org1``

    msp_id
      The MSP ID for the organization.

      | **Type**: str
      | **Sample**: ``Org1MSP``

    root_certs
      The list of root certificates for this organization.

      Root certificates must be supplied as base64 encoded PEM files.

      | **Type**: list
      | **Elements**: str
      | **Sample**: ``LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...``

    intermediate_certs
      The list of intermediate certificates for this organization.

      Intermediate certificates must be supplied as base64 encoded PEM files.

      | **Type**: list
      | **Elements**: str
      | **Sample**: ``LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...``

    admins
      The list of administrator certificates for this organization.

      Administrator certificates must be supplied as base64 encoded PEM files.

      | **Type**: list
      | **Elements**: str
      | **Sample**: ``LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...``

    revocation_list
      The list of revoked certificates for this organization.

      Revoked certificates must be supplied as base64 encoded PEM files.

      | **Type**: list
      | **Elements**: str
      | **Sample**: ``LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...``

    tls_root_certs
      The list of TLS root certificates for this organization.

      TLS root certificates must be supplied as base64 encoded PEM files.

      | **Type**: list
      | **Elements**: str
      | **Sample**: ``LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...``

    tls_intermediate_certs
      The list of TLS root certificates for this organization.

      TLS intermediate certificates must be supplied as base64 encoded PEM files.

      | **Type**: list
      | **Elements**: str
      | **Sample**: ``LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...``

    fabric_node_ous
      Configuration specific to the identity classification.

      | **Type**: dict

      enable
        True if identity classification is enabled for this organization, false otherwise.

        | **Type**: boolean
        | **Sample**: ``True``

      admin_ou_identifier
        Configuration specific to the admin identity classification.

        | **Type**: dict

        certificate
          The root or intermediate certificate for this identity classification.

          Root or intermediate certificates must be supplied as base64 encoded PEM files.

          | **Type**: str
          | **Sample**: ``LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...``

        organizational_unit_identifier
          The organizational unit (OU) identifier for this identity classification.

          | **Type**: str
          | **Sample**: ``admin``


      client_ou_identifier
        Configuration specific to the client identity classification.

        | **Type**: dict

        certificate
          The root or intermediate certificate for this identity classification.

          Root or intermediate certificates must be supplied as base64 encoded PEM files.

          | **Type**: str
          | **Sample**: ``LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...``

        organizational_unit_identifier
          The organizational unit (OU) identifier for this identity classification.

          | **Type**: str
          | **Sample**: ``client``


      peer_ou_identifier
        Configuration specific to the peer identity classification.

        | **Type**: dict

        certificate
          The root or intermediate certificate for this identity classification.

          Root or intermediate certificates must be supplied as base64 encoded PEM files.

          | **Type**: str
          | **Sample**: ``LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...``

        organizational_unit_identifier
          The organizational unit (OU) identifier for this identity classification.

          | **Type**: str
          | **Sample**: ``peer``


      orderer_ou_identifier
        Configuration specific to the orderer identity classification.

        | **Type**: dict

        certificate
          The root or intermediate certificate for this identity classification.

          Root or intermediate certificates must be supplied as base64 encoded PEM files.

          | **Type**: str
          | **Sample**: ``LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...``

        organizational_unit_identifier
          The organizational unit (OU) identifier for this identity classification.

          | **Type**: str
          | **Sample**: ``orderer``



    organizational_unit_identifiers
      The list of organizational unit identifiers for this organization.

      | **Type**: list
      | **Elements**: dict

      certificate
        The root or intermediate certificate for this organizational unit identifier.

        Root or intermediate certificates must be supplied as base64 encoded PEM files.

        | **Type**: str
        | **Sample**: ``LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0t...``

      organizational_unit_identifier
        The organizational unit (OU) identifier.

        | **Type**: str
        | **Sample**: ``acctdept``




