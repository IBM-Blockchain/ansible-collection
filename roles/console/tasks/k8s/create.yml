#
# SPDX-License-Identifier: Apache-2.0
#
---
- name: Fail if namespace not specified
  fail:
    msg: namespace not specified
  when: not namespace is defined

- name: Determine if namespace exists
  k8s_info:
    api_version: v1
    kind: Namespace
    name: "{{ namespace }}"
  register: namespace_info

- name: Create namespace
  k8s:
    state: present
    api_version: v1
    kind: Namespace
    name: "{{ namespace }}"
  when: not namespace_info.resources

- name: Create pod security policy
  k8s:
    state: present
    namespace: "{{ namespace }}"
    resource_definition: "{{ lookup('template', 'k8s/pod_security_policy.yml.j2') }}"

- name: Create cluster role
  k8s:
    state: present
    namespace: "{{ namespace }}"
    resource_definition: "{{ lookup('template', 'k8s/cluster_role.yml.j2') }}"

- name: Create cluster role binding
  k8s:
    state: present
    namespace: "{{ namespace }}"
    resource_definition: "{{ lookup('template', 'k8s/cluster_role_binding.yml.j2') }}"

- name: Create role binding
  k8s:
    state: present
    namespace: "{{ namespace }}"
    resource_definition: "{{ lookup('template', 'k8s/role_binding.yml.j2') }}"

- name: Create image secret
  k8s:
    state: present
    namespace: "{{ namespace }}"
    resource_definition: "{{ lookup('template', 'k8s/image_pull_secret.yml.j2') }}"

- name: Determine if operator exists
  k8s_info:
    namespace: "{{ namespace }}"
    api_version: apps/v1
    kind: Deployment
    name: "{{ operator }}"
  register: existing_operator

- name: If operator exists, determine expected and current images
  set_fact:
    operator_image_expected: "{{ (lookup('template', 'openshift/operator.yml.j2') | from_yaml).spec.template.spec.containers[0].image }}"
    operator_image_current: "{{ existing_operator.resources[0].spec.template.spec.containers[0].image }}"
  when: existing_operator.resources

- name: If operator exists, determine if it is being upgraded
  set_fact:
    operator_upgrade: "{{ operator_image_expected != operator_image_current }}"
  when: existing_operator.resources

- name: If operator does not exist, it is not being upgraded
  set_fact:
    operator_upgrade: False
  when: not existing_operator.resources

- name: Create operator
  k8s:
    state: present
    namespace: "{{ namespace }}"
    resource_definition: "{{ lookup('template', 'k8s/operator.yml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"

- name: Determine if console exists
  k8s_info:
    namespace: "{{ namespace }}"
    api_version: "{{ 'ibp.com/v1alpha2' if product_version is version('2.5.0', '>=') else 'ibp.com/v1alpha1' }}"
    kind: IBPConsole
    name: "{{ console }}"
  register: existing_console

- name: Create console
  k8s:
    state: present
    namespace: "{{ namespace }}"
    resource_definition: "{{ lookup('template', 'k8s/console.yml.j2') }}"
    apply: yes
  register: create_console

- name: Delete console config maps if it is being modified or upgraded
  k8s:
    state: absent
    namespace: "{{ namespace }}"
    api_version: v1
    kind: ConfigMap
    name: "{{ item }}"
  loop:
    - "{{ console }}"
    - "{{ console }}-console"
    - "{{ console }}-deployer"
  when: (operator_upgrade or create_console.changed) and existing_console.resources # noqa 503

- name: Delete console deployment if it is being modified or upgraded
  k8s:
    state: absent
    namespace: "{{ namespace }}"
    api_version: apps/v1
    kind: Deployment
    name: "{{ console }}"
  when: (operator_upgrade or create_console.changed) and existing_console.resources # noqa 503

- name: Wait for console deployment to exist
  k8s_info:
    namespace: "{{ namespace }}"
    api_version: apps/v1
    kind: Deployment
    name: "{{ console }}"
  register: console_deployment
  until: console_deployment.resources
  retries: "{{ wait_timeout }}"
  delay: 1

- name: Wait for console deployment to start
  k8s:
    state: present
    namespace: "{{ namespace }}"
    api_version: apps/v1
    kind: Deployment
    name: "{{ console }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"
  changed_when: False

- name: Wait for console ingress to exist
  k8s_info:
    namespace: "{{ namespace }}"
    api_version: extensions/v1beta1
    kind: Ingress
    name: "{{ console }}"
  register: console_route
  until: console_route.resources
  retries: "{{ wait_timeout }}"
  delay: 1

- name: Set console URL from console ingress
  set_fact:
    console_url: "https://{{ console_route.resources[0].spec.rules[0].host }}"

- name: Wait for console ingress to start
  uri:
    url: "{{ console_url }}"
    status_code: "200"
    validate_certs: no
  register: result
  until: result.status == 200
  retries: "{{ wait_timeout }}"
  delay: 1

- name: Print console URL
  debug:
    msg: IBM Blockchain Platform console available at {{ console_url }}
