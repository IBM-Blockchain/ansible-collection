#
# SPDX-License-Identifier: Apache-2.0
#
---
- name: Create certificate authority
  ibm.blockchain_platform.certificate_authority:
    state: "{{ state }}"
    api_endpoint: "{{ region.api_endpoint }}"
    api_authtype: "{{ region.api_authtype }}"
    api_key: "{{ region.api_key }}"
    api_secret: "{{ region.api_secret | default(omit) }}"
    api_token_endpoint: "{{ region.api_token_endpoint | default(omit) }}"
    name: "{{ ca_name }}"
    config_override:
      ca:
        registry:
          maxenrollments: -1
          identities:
            - name: "{{ ca_admin_enrollment_id }}"
              pass: "{{ ca_admin_enrollment_secret }}"
              type: client
              maxenrollments: -1
              attrs:
                hf.Registrar.Roles: "*"
                hf.Registrar.DelegateRoles: "*"
                hf.Revoker: true
                hf.IntermediateCA: true
                hf.GenCRL: true
                hf.Registrar.Attributes: "*"
                hf.AffiliationMgr: true
    resources: "{{ ca_resources | default(omit) }}"
    storage: "{{ ca_storage | default(omit) }}"
    version: "{{ ca_version | default(omit) }}"
    wait_timeout: "{{ wait_timeout | default(omit) }}"
  register: certificate_authority_result

- name: Import certificate authority into all other regions
  ibm.blockchain_platform.external_certificate_authority:
    state: "{{ state }}"
    api_endpoint: "{{ other_region.api_endpoint }}"
    api_authtype: "{{ other_region.api_authtype }}"
    api_key: "{{ other_region.api_key }}"
    api_secret: "{{ other_region.api_secret | default(omit) }}"
    api_token_endpoint: "{{ other_region.api_token_endpoint | default(omit) }}"
    certificate_authority: "{{ certificate_authority_result.certificate_authority }}"
  when: region_index != other_region_index
  loop: "{{ regions }}"
  loop_control:
    index_var: other_region_index
    label: "{{ other_region.api_endpoint }}"
    loop_var: other_region

- name: Enroll certificate authority admin
  ibm.blockchain_platform.enrolled_identity:
    state: "{{ state }}"
    api_endpoint: "{{ region.api_endpoint }}"
    api_authtype: "{{ region.api_authtype }}"
    api_key: "{{ region.api_key }}"
    api_secret: "{{ region.api_secret | default(omit) }}"
    api_token_endpoint: "{{ region.api_token_endpoint | default(omit) }}"
    certificate_authority: "{{ ca_name }}"
    name: "{{ ca_name }} Admin"
    enrollment_id: "{{ ca_admin_enrollment_id }}"
    enrollment_secret: "{{ ca_admin_enrollment_secret }}"
    path: "{{ ca_admin_identity }}"

- name: Register the organization admin
  ibm.blockchain_platform.registered_identity:
    state: "{{ state }}"
    api_endpoint: "{{ region.api_endpoint }}"
    api_authtype: "{{ region.api_authtype }}"
    api_key: "{{ region.api_key }}"
    api_secret: "{{ region.api_secret | default(omit) }}"
    api_token_endpoint: "{{ region.api_token_endpoint | default(omit) }}"
    certificate_authority: "{{ ca_name }}"
    registrar: "{{ ca_admin_identity }}"
    enrollment_id: "{{ organization_admin_enrollment_id }}"
    enrollment_secret: "{{ organization_admin_enrollment_secret }}"
    max_enrollments: -1
    type: admin

- name: Register the ordering service
  ibm.blockchain_platform.registered_identity:
    state: "{{ state }}"
    api_endpoint: "{{ region.api_endpoint }}"
    api_authtype: "{{ region.api_authtype }}"
    api_key: "{{ region.api_key }}"
    api_secret: "{{ region.api_secret | default(omit) }}"
    api_token_endpoint: "{{ region.api_token_endpoint | default(omit) }}"
    certificate_authority: "{{ ca_name }}"
    registrar: "{{ ca_admin_identity }}"
    enrollment_id: "{{ ordering_service_enrollment_id }}"
    enrollment_secret: "{{ ordering_service_enrollment_secret }}"
    max_enrollments: -1
    type: orderer

- name: Enroll the organization admin
  ibm.blockchain_platform.enrolled_identity:
    state: "{{ state }}"
    api_endpoint: "{{ region.api_endpoint }}"
    api_authtype: "{{ region.api_authtype }}"
    api_key: "{{ region.api_key }}"
    api_secret: "{{ region.api_secret | default(omit) }}"
    api_token_endpoint: "{{ region.api_token_endpoint | default(omit) }}"
    certificate_authority: "{{ ca_name }}"
    name: "{{ organization_name }} Admin"
    enrollment_id: "{{ organization_admin_enrollment_id }}"
    enrollment_secret: "{{ organization_admin_enrollment_secret }}"
    path: "{{ organization_admin_identity }}"
  register: org_admin

- name: Create organization
  ibm.blockchain_platform.organization:
    state: "{{ state }}"
    api_endpoint: "{{ region.api_endpoint }}"
    api_authtype: "{{ region.api_authtype }}"
    api_key: "{{ region.api_key }}"
    api_secret: "{{ region.api_secret | default(omit) }}"
    api_token_endpoint: "{{ region.api_token_endpoint | default(omit) }}"
    name: "{{ organization_name }}"
    msp_id: "{{ organization_msp_id }}"
    certificate_authority: "{{ ca_name }}"
    registrar: "{{ ca_admin_identity }}"
    admins:
      - "{{ org_admin.enrolled_identity.cert | default(omit) }}"
  register: organization_result

- name: Import organization into all other regions
  ibm.blockchain_platform.external_organization:
    state: "{{ state }}"
    api_endpoint: "{{ other_region.api_endpoint }}"
    api_authtype: "{{ other_region.api_authtype }}"
    api_key: "{{ other_region.api_key }}"
    api_secret: "{{ other_region.api_secret | default(omit) }}"
    api_token_endpoint: "{{ other_region.api_token_endpoint | default(omit) }}"
    organization: "{{ organization_result.organization }}"
  when: region_index != other_region_index
  loop: "{{ regions }}"
  loop_control:
    index_var: other_region_index
    label: "{{ other_region.api_endpoint }}"
    loop_var: other_region

- name: Clear ordering service nodes
  set_fact:
    ordering_service_nodes_in_region: 0

- name: Determine and set ordering service nodes
  set_fact:
    ordering_service_nodes_in_region: "{{ (ordering_service_nodes_in_region | int) + 1 }}"
  loop: "{{ range(0, ordering_service_nodes, 1) | list }}"
  when: region_index == (item % (regions | length))

- name: Clear ordering service zones
  set_fact:
    ordering_service_zones_in_region: []

- name: Determine and set ordering service zones
  set_fact:
    ordering_service_zones_in_region: "{{ (ordering_service_zones_in_region | default([])) + [zones[item % (zones | length)]] }}"
  loop: "{{ range(0, ordering_service_nodes_in_region | int, 1) | list }}"
  when: zones is defined and zones

- name: Determine if ordering service exists
  ibm.blockchain_platform.ordering_service_info:
    api_endpoint: "{{ region.api_endpoint }}"
    api_authtype: "{{ region.api_authtype }}"
    api_key: "{{ region.api_key }}"
    api_secret: "{{ region.api_secret | default(omit) }}"
    api_token_endpoint: "{{ region.api_token_endpoint | default(omit) }}"
    name: "{{ ordering_service_name }}"
  register: ordering_service_info_result

- name: Create ordering service
  ibm.blockchain_platform.ordering_service:
    state: "{{ state }}"
    api_endpoint: "{{ region.api_endpoint }}"
    api_authtype: "{{ region.api_authtype }}"
    api_key: "{{ region.api_key }}"
    api_secret: "{{ region.api_secret | default(omit) }}"
    api_token_endpoint: "{{ region.api_token_endpoint | default(omit) }}"
    name: "{{ ordering_service_name }}"
    msp_id: "{{ organization_msp_id }}"
    nodes: "{{ ordering_service_nodes_in_region }}"
    certificate_authority: "{{ ca_name }}"
    enrollment_id: "{{ ordering_service_enrollment_id }}"
    enrollment_secret: "{{ ordering_service_enrollment_secret }}"
    admin_certificates:
      - "{{ org_admin.enrolled_identity.cert | default(omit) }}"
    resources: "{{ ordering_service_resources | default(omit) }}"
    storage: "{{ ordering_service_storage | default(omit) }}"
    version: "{{ ordering_service_version | default(omit) }}"
    wait_timeout: "{{ wait_timeout | default(omit) }}"
    zones: "{{ ordering_service_zones_in_region or omit }}"
  when: not ordering_service_info_result.exists

- name: Create ordering service nodes
  include_tasks: primary-osn.yml
  loop: "{{ range(0, ordering_service_nodes_in_region | int, 1) | list }}"
  loop_control:
    index_var: node_index
