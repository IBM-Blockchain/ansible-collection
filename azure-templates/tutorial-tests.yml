#
# SPDX-License-Identifier: Apache-2.0
#
---
parameters:
  api_endpoint: ""
  api_authtype: ""
  api_key: ""
  api_secret: ""
  k8s_namespace: ""
  docker: false
steps:
  - ${{ if eq(parameters.docker, true) }}:
    # yamllint disable-line rule:indentation
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: Docker image
        path: $(System.DefaultWorkingDirectory)
      displayName: Download Docker image
    - script: |
        set -ex
        gunzip -c image.tar.gz | docker load
      displayName: Load Docker image
  - script: |
      set -ex
      VERSION=$(yq -r .version galaxy.yml)
      cd tutorial
      TEST_RUN_ID=$(dd if=/dev/urandom bs=4096 count=1 2>/dev/null | shasum | awk '{print $1}')
      SHORT_TEST_RUN_ID=$(echo ${TEST_RUN_ID} | awk '{print substr($1,1,8)}')
      yq -yi ".ordering_org_name=\"Ordering Org ${SHORT_TEST_RUN_ID}\"" common-vars.yml
      yq -yi ".ordering_service_name=\"Ordering Service ${SHORT_TEST_RUN_ID}\"" common-vars.yml
      yq -yi ".org1_name=\"Org1 ${SHORT_TEST_RUN_ID}\"" common-vars.yml
      yq -yi ".org1_msp_id=\"Org1${SHORT_TEST_RUN_ID}MSP\"" common-vars.yml
      yq -yi ".org2_name=\"Org2 ${SHORT_TEST_RUN_ID}\"" common-vars.yml
      yq -yi ".org2_msp_id=\"Org2${SHORT_TEST_RUN_ID}MSP\"" common-vars.yml
      yq -yi ".ordering_service_msp=\"Orderer${SHORT_TEST_RUN_ID}MSP\"" ordering-org-vars.yml
      yq -yi ".org1_ca_name=\"Org1 CA ${SHORT_TEST_RUN_ID}\"" org1-vars.yml
      yq -yi ".org1_peer_name=\"Org1 Peer ${SHORT_TEST_RUN_ID}\"" org1-vars.yml
      yq -yi ".org2_ca_name=\"Org2 CA ${SHORT_TEST_RUN_ID}\"" org2-vars.yml
      yq -yi ".org2_peer_name=\"Org2 Peer ${SHORT_TEST_RUN_ID}\"" org2-vars.yml
      for VARS in ordering-org-vars.yml org1-vars.yml org2-vars.yml; do
        yq -yi '.api_endpoint="${{ parameters.api_endpoint }}"' ${VARS}
        yq -yi '.api_authtype="${{ parameters.api_authtype }}"' ${VARS}
        yq -yi '.api_key="${{ parameters.api_key }}"' ${VARS}
        yq -yi '.api_secret="${{ parameters.api_secret }}"' ${VARS}
        yq -yi '.k8s_namespace="${{ parameters.k8s_namespace }}"' ${VARS}
      done
      if [ "${{ parameters.docker }}" = "true" ]; then
        function docker_cleanup {
          docker run --rm -u $(id -u) -v ${PWD}:/tutorial ibmcom/ibp-ansible:${VERSION} /tutorial/join_network.sh destroy
        }
        trap docker_cleanup EXIT
        docker run --rm -u $(id -u) -v ${PWD}:/tutorial ibmcom/ibp-ansible:${VERSION} /tutorial/build_network.sh build
        docker run --rm -u $(id -u) -v ${PWD}:/tutorial ibmcom/ibp-ansible:${VERSION} /tutorial/join_network.sh join
        docker run --rm -u $(id -u) -v ${PWD}:/tutorial ibmcom/ibp-ansible:${VERSION} /tutorial/deploy_smart_contract.sh
        trap - EXIT
        docker_cleanup
      else
        function cleanup {
          ./join_network.sh destroy
        }
        trap cleanup EXIT
        ./build_network.sh build
        ./join_network.sh join
        ./deploy_smart_contract.sh
        trap - EXIT
        ./join_network.sh destroy
      fi
    displayName: Run tutorial
