#
# SPDX-License-Identifier: Apache-2.0
#
---
schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
        - master
    always: true
trigger:
  branches:
    include:
      - "*"
    exclude:
      - gh-pages
  tags:
    include:
      - "*"
stages:
  - stage: build
    displayName: Build
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: build_collection
        displayName: Build collection
        steps:
          - template: azure-templates/build-dependencies.yml
          - script: |
              set -ex
              VERSION=$(yq -r .version galaxy.yml)
              ansible-galaxy collection build
              mv ibm-blockchain_platform-${VERSION}.tar.gz ibm-blockchain_platform.tar.gz
            displayName: Build collection artifact
          - script: |
              set -ex
              VERSION=$(yq -r .version galaxy.yml)
              ansible-galaxy collection install ibm-blockchain_platform.tar.gz
            displayName: Install collection
          - script: |
              set -ex
              flake8 .
              ansible-lint .
              for ROLE in roles/*; do ansible-lint ${ROLE}; done
              for PLAYBOOK in tutorial/??-*.yml; do ansible-lint ${PLAYBOOK}; done
              for PLAYBOOK in tutorial/v1.x/??-*.yml; do ansible-lint ${PLAYBOOK}; done
              shellcheck tutorial/*.sh
              yamllint .
            displayName: Lint collection
          - publish: ibm-blockchain_platform.tar.gz
            artifact: Collection
            displayName: Publish collection
      - job: build_documentation
        displayName: Build documentation
        steps:
          - template: azure-templates/build-dependencies.yml
          - script: |
              set -ex
              cd docs
              make
              cd ..
              tar cf documentation.tar.gz docs/build
            displayName: Build documentation
          - publish: documentation.tar.gz
            artifact: Documentation
            displayName: Publish documentation
      - job: build_docker_image
        displayName: Build Docker image
        steps:
          - template: azure-templates/build-dependencies.yml
          - script: |
              set -ex
              VERSION=$(yq -r .version galaxy.yml)
              docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
              docker buildx create --use
              docker buildx build -t ibmcom/ibp-ansible:${VERSION} --platform linux/amd64,linux/s390x .
              docker build -t ibmcom/ibp-ansible:${VERSION} .
              docker tag ibmcom/ibp-ansible:${VERSION} ibmcom/ibp-ansible:latest
              docker save ibmcom/ibp-ansible:${VERSION} ibmcom/ibp-ansible:latest | gzip -c > image.tar.gz
            displayName: Build Docker image
          - publish: image.tar.gz
            artifact: Docker image
            displayName: Publish Docker image
  - stage: test
    displayName: Test
    dependsOn: build
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: integration_tests_software
        displayName: Run integration tests (software)
        steps:
          - template: azure-templates/test-dependencies.yml
          - template: azure-templates/integration-tests.yml
            parameters:
              api_endpoint: $(IBM Blockchain Platform API Endpoint)
              api_authtype: $(IBM Blockchain Platform API Auth Type)
              api_key: $(IBM Blockchain Platform API Key)
              api_secret: $(IBM Blockchain Platform API Secret)
              k8s_namespace: $(IBM Blockchain Platform K8S Namespace)
      - job: integration_tests_saas
        displayName: Run integration tests (SaaS)
        steps:
          - template: azure-templates/test-dependencies.yml
          - template: azure-templates/integration-tests.yml
            parameters:
              api_endpoint: $(IBM Blockchain Platform SaaS API Endpoint)
              api_authtype: $(IBM Blockchain Platform SaaS API Auth Type)
              api_key: $(IBM Blockchain Platform SaaS API Key)
              api_secret: $(IBM Blockchain Platform SaaS API Secret)
              k8s_namespace: $(IBM Blockchain Platform SaaS K8S Namespace)
      - job: security_tests
        displayName: Run security tests
        steps:
          - task: HCLAppScan@1
            inputs:
              AppSecTestService: "HCL AppScan on Cloud"
              applications: "d35d7c51-bb8b-4de9-9164-26c4843cfb60"
              scantype: "static"
            displayName: Run HCL AppScan on Cloud
      - job: tutorial_tests_software
        displayName: Run tutorial tests (software)
        steps:
          - template: azure-templates/test-dependencies.yml
          - template: azure-templates/tutorial-tests.yml
            parameters:
              api_endpoint: $(IBM Blockchain Platform API Endpoint)
              api_authtype: $(IBM Blockchain Platform API Auth Type)
              api_key: $(IBM Blockchain Platform API Key)
              api_secret: $(IBM Blockchain Platform API Secret)
              k8s_namespace: $(IBM Blockchain Platform K8S Namespace)
              docker: false
      - job: tutorial_tests_saas
        displayName: Run tutorial tests (SaaS)
        steps:
          - template: azure-templates/test-dependencies.yml
          - template: azure-templates/tutorial-tests.yml
            parameters:
              api_endpoint: $(IBM Blockchain Platform SaaS API Endpoint)
              api_authtype: $(IBM Blockchain Platform SaaS API Auth Type)
              api_key: $(IBM Blockchain Platform SaaS API Key)
              api_secret: $(IBM Blockchain Platform SaaS API Secret)
              k8s_namespace: $(IBM Blockchain Platform SaaS K8S Namespace)
              docker: true
  - stage: publish
    displayName: Publish
    dependsOn: test
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: publish_collection
        displayName: Publish collection
        steps:
          - template: azure-templates/build-dependencies.yml
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: Collection
              path: $(System.DefaultWorkingDirectory)
            displayName: Download collection
          - script: |
              set -ex
              VERSION=$(yq -r .version galaxy.yml)
              mv ibm-blockchain_platform.tar.gz ibm-blockchain_platform-${VERSION}.tar.gz
              ansible-galaxy collection publish --api-key $(Ansible Galaxy API Key) ibm-blockchain_platform-${VERSION}.tar.gz
            displayName: Publish collection to Ansible Galaxy
      - job: publish_documentation
        displayName: Publish documentation
        steps:
          - template: azure-templates/build-dependencies.yml
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: Documentation
              path: $(System.DefaultWorkingDirectory)
            displayName: Download documentation
          - script: |
              set -ex
              tar xf documentation.tar.gz
              git config --global user.name $(GitHub User Name)
              git config --global user.email $(GitHub User Email)
              git clone -b gh-pages $(Build.Repository.Uri) /tmp/gh-pages
              pushd /tmp/gh-pages
              git rm -rf . || true
              popd
              pushd docs/build
              tar cf - . | (cd /tmp/gh-pages; tar xvf -)
              popd
              pushd /tmp/gh-pages
              git add .
              git commit -s -m "Automatic documentation build"
              git -c http.extraheader="Authorization: Basic $(GitHub Basic Auth)" push $(Build.Repository.Uri) HEAD:gh-pages -f
              popd
            displayName: Publish documentation to GitHub Pages
      - job: publish_docker_image
        displayName: Publish Docker image
        steps:
          - template: azure-templates/build-dependencies.yml
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: Docker image
              path: $(System.DefaultWorkingDirectory)
            displayName: Download Docker image
          - script: |
              set -ex
              gunzip -c image.tar.gz | docker load
            displayName: Load Docker image
          - script: |
              set -ex
              VERSION=$(yq -r .version galaxy.yml)
              docker login -u $(Docker Hub User Name) -p $(Docker Hub Access Token)
              docker push ibmcom/ibp-ansible:${VERSION}
              docker push ibmcom/ibp-ansible:latest
            displayName: Publish Docker image to Docker Hub
